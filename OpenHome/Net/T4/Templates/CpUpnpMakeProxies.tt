<#@ assembly name="UpnpServiceMake.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    Document u = new Document(TemplateArgument("xml"));
#>
# Auto-generated file.  DO NOT EDIT DIRECTLY
# Update CpUpnpMakeProxies.tt and run
#    make generate-makefiles
# to apply any updates

objects_proxies = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
                  $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) \
                  $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) \
                  $(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) \
<#  } #>

# Service proxies have well controlled dependencies so we can document a more limited set of headers
headers_proxy = $(inc_build)/OpenHome/Buffer.h \
                $(inc_build)/OpenHome/Buffer.inl \
                $(inc_build)/OpenHome/Exception.h \
                $(inc_build)/OpenHome/Functor.h \
                $(inc_build)/OpenHome/Net/Core/FunctorAsync.h \
                $(inc_build)/OpenHome/Types.h \
                $(inc_build)/OpenHome/Net/Core/CpProxy.h \
                $(inc_build)/OpenHome/Net/Private/CpiService.h \
                $(inc_build)/OpenHome/Net/Private/Service.h \
                $(inc_build)/OpenHome/Private/Thread.h \
                $(inc_build)/OpenHome/Net/Private/AsyncPrivate.h

proxy_dotnet_assemblies = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
        Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll \
<#  } #>

proxy_dotnet_assemblies_with_path = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
        $(objdir)Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll \
<#  } #>

proxy_java_classes_with_path = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
        $(objdir)org/openhome/net/controlpoint/proxies/CpProxy<#=FilePrefixTypeAndVersion(s)#>.class \
<#  } #>


proxies : make_obj_dir $(ohNetLibDir)$(libprefix)ohNetCore.$(libext) $(objects_proxies)
	$(ar)$(libprefix)ohNetGeneratedProxies.$(libext) $(objects_proxies)
<#  foreach (Service s in u.iServices) #>
<#  { #>
$(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) : $(proxyCppCore)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.cpp $(headers_proxy) OpenHome/Net/ControlPoint/Proxies/Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) -c $(cppflags) $(includes) $(proxyCppCore)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.cpp
$(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) : $(proxyC)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.cpp $(headers_proxy) OpenHome/Net/Bindings/C/ControlPoint/Proxies/Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) -c $(cppflags) $(includes) $(proxyC)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.cpp
$(objdir)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) : $(proxyCppStd)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.cpp $(headers_proxy) OpenHome/Net/Bindings/Cpp/ControlPoint/Proxies/Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) -c $(cppflags) $(includes) $(proxyCppStd)Cp<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.cpp
<#  } #>

# Proxy assemblies for .NET:

CpProxyDotNetAssemblies: $(proxy_dotnet_assemblies_with_path)

<# foreach (Service s in u.iServices) #>
<# { #>
$(objdir)Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll: $(depDirCs)ohNet.net.dll $(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.cs
	$(csharp) $(debug_csharp) $(csharpdefines) /t:library \
        /out:$(objdir)Cp<#=FilePrefixTypeAndVersion(s)#>.net.dll \
        /reference:$(depDirCs)ohNet.net.dll \
        $(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.cs
<# } #>

# Single Proxy assembly (all OpenHome services)  for .NET:

CpProxyDotNetOpenHomeAssembly: $(proxy_dotnet_assemblies_with_path) $(objdir)CpProxiesOpenHome.net.dll

$(objdir)CpProxiesOpenHome.net.dll: $(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
<#   if (s.iPublisher == "OpenHome") #>
<#   { #>
                                    $(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.cs \
<#   } #>
<# } #>

	$(csharp) $(debug_csharp) $(csharpdefines) /t:library \
        /out:$(objdir)CpProxiesOpenHome.net.dll \
        /reference:$(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
<#   if (s.iPublisher == "OpenHome") #>
<#   { #>
        $(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.cs \
<#   } #>
<# } #>

# Proxy classes for Java:

CpProxyJavaClasses: $(proxy_java_classes_with_path)

<# foreach (Service s in u.iServices) #>
<# { #>
$(objdir)org/openhome/net/controlpoint/proxies/CpProxy<#=FilePrefixTypeAndVersion(s)#>.class : $(ohNetLibDir)ohnet.jar $(proxyJava)CpProxy<#=FilePrefixTypeAndVersion(s)#>.java
	$(javac) -classpath $(ohNetLibDir)ohnet.jar -d $(objdir) $(proxyJava)CpProxy<#=FilePrefixTypeAndVersion(s)#>.java
<# } #>


<#+
string FilePrefixTypeAndVersion(Service s)
{
    return FilePrefix(s) + s.iType.ToString() + s.iVersion.ToString();
}
string FilePrefix(Service s)
{
    string prefix = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = s.iDomain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        prefix += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            prefix += str.Substring(1, str.Length-1);
        }
    }
    return prefix;
}

string TemplateArgument(string aName)
{
    string[] args =  System.Environment.GetCommandLineArgs();

    bool isarg = false;

    foreach (string arg in args)
    {
        if (isarg)
        {
            string[] parts = arg.Split(new char[] {':'});

            if (parts.Length == 2)
            {
                if (parts[0] == aName)
                {
                    return (parts[1]);
                }
            }

            isarg = false;
            continue;
        }

        if (arg == "-a")
        {
            isarg = true;
        }
    }

    throw (new ArgumentException(aName + " not specified"));
}
#>
