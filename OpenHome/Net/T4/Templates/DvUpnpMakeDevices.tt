<#@ assembly name="UpnpServiceMake.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
	Document u = new Document(TemplateArgument("xml"));
#>
# Auto-generated file.  DO NOT EDIT DIRECTLY
# Update DvUpnpMakeDevices.tt and run
#    make generate-makefiles
# to apply any updates

objects_devices = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
				  $(objdir)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) \
				  $(objdir)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) \
				  $(objdir)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) \
<#  } #>

# Devices have well controlled dependencies so we can document a more limited set of headers
headers_device = $(inc_build)/OpenHome/Types.h \
				 $(inc_build)/OpenHome/Net/Private/DviService.h \
				 $(inc_build)/OpenHome/Functor.h \
				 $(inc_build)/OpenHome/Net/Private/Service.h \
				 $(inc_build)/OpenHome/Net/Private/FunctorDviInvocation.h

device_dotnet_assemblies = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
		Dv<#=FilePrefixTypeAndVersion(s)#>.net.dll \
<#  } #>

device_dotnet_assemblies_with_path = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
		$(objdir)Dv<#=FilePrefixTypeAndVersion(s)#>.net.dll \
<#  } #>

device_java_classes_with_path = \
<#  foreach (Service s in u.iServices) #>
<#  { #>
		$(objdir)org/openhome/net/device/providers/DvProvider<#=FilePrefixTypeAndVersion(s)#>.class \
<#  } #>

devices : make_obj_dir $(ohNetLibDir)$(libprefix)ohNetCore.$(libext) $(objects_devices)
	$(ar)$(libprefix)ohNetGeneratedDevices.$(libext) $(objects_devices)
<#  foreach (Service s in u.iServices) #>
<#  { #>
$(objdir)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) : $(deviceCppCore)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.cpp $(headers_device) OpenHome/Net/Device/Providers/Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.$(objext) -c $(cppflags) $(includes) $(deviceCppCore)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.cpp
$(objdir)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) : $(deviceCppStd)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.cpp $(headers_device) OpenHome/Net/Bindings/Cpp/Device/Providers/Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.$(objext) -c $(cppflags) $(includes) $(deviceCppStd)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>Std.cpp
$(objdir)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) : $(deviceC)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.cpp $(headers_device) OpenHome/Net/Bindings/C/Device/Providers/Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>.h
	$(compiler)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.$(objext) -c $(cppflags) $(includes) $(deviceC)Dv<#=FilePrefix(s)#><#=s.iType#><#=s.iVersion#>C.cpp
<#  } #>


# Device assemblies for .NET:

DvDeviceDotNetAssemblies: $(device_dotnet_assemblies_with_path)

<# foreach (Service s in u.iServices) #>
<# { #>
$(objdir)Dv<#=FilePrefixTypeAndVersion(s)#>.net.dll: $(depDirCs)ohNet.net.dll $(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs
	$(dotnetsdk) build $(proxyCs)Cp<#=FilePrefixTypeAndVersion(s)#>.csproj --framework $(dotnetFramework) --output $(objdir) -p:ohNetDepDir=$(depDirCs)
<# } #>


# Single Provider assembly (all OpenHome services)  for .NET:

DvProviderDotNetOpenHomeAssembly: $(device_dotnet_assemblies_with_path) $(objdir)DvProvidersOpenHome.net.dll

$(objdir)DvProvidersOpenHome.net.dll: $(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
<#   if (s.iPublisher == "OpenHome") #>
<#   { #>
								$(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs \
<#   } #>
<# } #>

	$(csharp) $(debug_csharp) $(csharpdefines) /t:library \
		/out:$(objdir)DvProvidersOpenHome.net.dll \
		/reference:$(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
<#   if (s.iPublisher == "OpenHome") #>
<#   { #>
		$(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs \
<#   } #>
<# } #>


# Single Provider assembly (all Linn services)  for .NET:

DvProviderDotNetLinnAssembly: $(proxy_dotnet_assemblies_with_path) $(objdir)DvProvidersLinn.net.dll

$(objdir)DvProvidersLinn.net.dll: $(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
<#   if (s.iPublisher == "Linn") #>
<#   { #>
								$(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs \
<#   } #>
<# } #>

	$(csharp) $(debug_csharp) $(csharpdefines) /t:library \
		/out:$(objdir)DvProvidersLinn.net.dll \
		/reference:$(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
<#   if (s.iPublisher == "Linn") #>
<#   { #>
		$(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs \
<#   } #>
<# } #>


# Single Provider assembly (all services)  for .NET:

DvProviderDotNetAllAssembly: $(proxy_dotnet_assemblies_with_path) $(objdir)DvProvidersAll.net.dll

$(objdir)DvProvidersAll.net.dll: $(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
								$(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs \
<# } #>

		$(csharp) $(debug_csharp) $(csharpdefines) /t:library \
		/out:$(objdir)DvProvidersAll.net.dll \
		/reference:$(depDirCs)ohNet.net.dll \
<# foreach (Service s in u.iServices) #>
<# { #>
		$(deviceCs)Dv<#=FilePrefixTypeAndVersion(s)#>.cs \
<# } #>


# Device classes for Java:

DvDeviceJavaClasses: $(device_java_classes_with_path)

<# foreach (Service s in u.iServices) #>
<# { #>
$(objdir)org/openhome/net/device/providers/DvProvider<#=FilePrefixTypeAndVersion(s)#>.class : $(ohNetLibDir)ohnet.jar $(deviceJava)DvProvider<#=FilePrefixTypeAndVersion(s)#>.java
	$(javac) -classpath $(ohNetLibDir)ohnet.jar -d $(objdir) $(deviceJava)DvProvider<#=FilePrefixTypeAndVersion(s)#>.java
<# } #>


<#+
string FilePrefixTypeAndVersion(Service s)
{
	return FilePrefix(s) + s.iType.ToString() + s.iVersion.ToString();
}
string FilePrefix(Service s)
{
	string prefix = "";
	char[] charSeparators = new char[] {'.'};
	string[] res = s.iDomain.Split(charSeparators, StringSplitOptions.None);
	foreach (string str in res)
	{
		prefix += str.Substring(0, 1).ToUpper();
		if (str.Length > 1)
		{
			prefix += str.Substring(1, str.Length-1);
		}
	}
	return prefix;
}

string TemplateArgument(string aName)
{
	string[] args =  System.Environment.GetCommandLineArgs();

	bool isarg = false;

	foreach (string arg in args)
	{
		if (isarg)
		{
			string[] parts = arg.Split(new char[] {':'});

			if (parts.Length == 2)
			{
				if (parts[0] == aName)
				{
					return (parts[1]);
				}
			}

			isarg = false;
			continue;
		}

		if (arg == "-a")
		{
			isarg = true;
		}
	}

	throw (new ArgumentException(aName + " not specified"));
}
#>
