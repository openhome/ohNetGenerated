<#@ assembly name="UpnpServiceXml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="OpenHome.Net.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
       version = Convert.ToUInt32(TemplateArgument("version"));
    }
    catch (FormatException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    uint useBuffers = Convert.ToUInt32(TemplateArgument("buffer"));
    string deviceClass = "CpDevice";
    if (useBuffers == 0)
    {
        deviceClass = "CpDeviceCpp";
    }

    string upnpdomain = domain.Replace(".", "-");

    if (upnpdomain.StartsWith("upnp-"))
    {
        upnpdomain = "schemas-" + upnpdomain;
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    if (useBuffers == 0)
    {
        fileName += "Cpp";
    }
    string className = "CpProxy" + fileName;

    Initialise(useBuffers);

    Document u = new Document(TemplateArgument("xml"));
#>
#ifndef HEADER_<#=fileName.ToUpper()#>
#define HEADER_<#=fileName.ToUpper()#>

#include <OpenHome/Types.h>
<# if (useBuffers == 1) #>
<# { #>
#include <OpenHome/Buffer.h>
<# } #>
#include <OpenHome/Exception.h>
#include <OpenHome/Functor.h>
#include <OpenHome/Net/Core/FunctorAsync.h>
#include <OpenHome/Net/Core/CpProxy.h>
<# if (useBuffers == 0) #>
<# { #>

#include <string>
<# } #>

namespace OpenHome {
namespace Net {

class <#=deviceClass#>;
class Action;
class PropertyBinary;
class PropertyBool;
class PropertyInt;
class PropertyString;
class PropertyUint;

/**
 * Proxy for <#=domain#>:<#=type#>:<#=version#>
 * @ingroup Proxies
 */
class <#=className#> : public ICpProxy
{
public:
    /**
     * Constructor.
     *
     * Use iCpProxy::[Un]Subscribe() to enable/disable querying of state variable
     * and reporting of their changes.
     *
     * @param[in]  aDevice   The device to use
     */
    <#=className#>(<#=deviceClass#>& aDevice);
    /**
     * Destructor.
     * If any asynchronous method is in progress, this will block until they complete.
     * [Note that any methods still in progress are likely to complete with an error.]
     * Clients who have called Subscribe() do not need to call Unsubscribe() before
     * calling delete.  An unsubscribe will be triggered automatically when required.
     */
    ~<#=className#>();
<#  foreach (Method a in u.methods) #>
<#  { #>

    /**
     * Invoke the action synchronously.  Blocks until the action has been processed
     * on the device and sets any output arguments.
<#      if (a.inargs.Count > 0 || a.outargs.Count > 0) #>
<#      { #>
     *
<#      } #>
<#      foreach (Argument i in a.inargs) #>
<#      { #>
     * @param[in]  a<#=i.name#>
<#      } #>
<#      foreach (Argument i in a.outargs) #>
<#      { #>
     * @param[out] a<#=i.name#>
<#      } #>
     */
    void Sync<#=a.name#>(<#=ArgString(a)#>);
    /**
     * Invoke the action asynchronously.
     * Returns immediately and will run the client-specified callback when the action
     * later completes.  Any output arguments can then be retrieved by calling
     * End<#=a.name#>().
     *
<#      foreach (Argument i in a.inargs) #>
<#      { #>
     * @param[in] a<#=i.name#>
<#      } #>
     * @param[in] aFunctor   Callback to run when the action completes.
     *                       This is guaranteed to be run but may indicate an error
     */
    void Begin<#=a.name#>(<#=InStringTrailingComma(a)#>FunctorAsync& aFunctor);
    /**
     * Retrieve the output arguments from an asynchronously invoked action.
     * This may only be called from the callback set in the above Begin function.
     *
     * @param[in]  aAsync  Argument passed to the callback set in the above Begin function
<#      foreach (Argument i in a.outargs) #>
<#      { #>
     * @param[out] a<#=i.name#>
<#      } #>
     */
    void End<#=a.name#>(<#=OutputArgStringPrefix("IAsync& aAsync", a)#>);
<#  } #>

<#  foreach (Variable s in u.evented) #>
<#  { #>
    /**
     * Set a callback to be run when the <#=s.name#> state variable changes.
     *
     * Callbacks may be run in different threads but callbacks for a
     * <#=className#> instance will not overlap.
     *
     * @param[in]  aFunctor  The callback to run when the state variable changes
     */
    void SetProperty<#=s.name#>Changed(Functor& aFunctor);
<#  } #>

<#  foreach (Variable s in u.evented) #>
<#  { #>
    /**
     * Query the value of the <#=s.name#> property.
     *
     * This function is threadsafe and can only be called if Subscribe() has been
     * called and a first eventing callback received more recently than any call
     * to Unsubscribe().
     *
     * @param[out] a<#=s.name#>
     */
    void Property<#=s.name#>(<#=propargtype[s.type]#> a<#=s.name#>) const;
<#  } #>
    /**
    * This function exposes the Subscribe() function of the iCpProxy member variable
    */
    void Subscribe();
    /**
    * This function exposes the Unsubscribe() function of the iCpProxy member variable
    */
    void Unsubscribe();
    /**
    * This function exposes the SetPropertyChanged() function of the iCpProxy member variable
    */
    void SetPropertyChanged(Functor& aFunctor);
    /**
    * This function exposes the SetPropertyInitialEvent() function of the iCpProxy member variable
    */
    void SetPropertyInitialEvent(Functor& aFunctor);
    /**
    * This function exposes the AddProperty() function of the iCpProxy member variable
    */
    void AddProperty(Property* aProperty);
    /**
    * This function exposes DestroyService() function of the iCpProxy member variable
    */
    void DestroyService();
    /**
    * This function exposes the REportEvent() function of the iCpProxy member variable
    */
    void ReportEvent(Functor aFunctor);
    /**
    * This function exposes the Version() function of the iCpProxy member variable
    */
    TUint Version() const;
private:
    CpProxy iCpProxy;
<#  foreach (Variable s in u.evented) #>
<#  { #>
    void <#=s.name#>PropertyChanged();
<#  } #>
private:
<#  foreach (Method a in u.methods) #>
<#  { #>
    Action* iAction<#=a.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
    <#=proptype[s.type]#>* i<#=s.name#>;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
    Functor i<#=s.name#>Changed;
<#  } #>
};

} // namespace Net
} // namespace OpenHome

#endif // HEADER_<#=fileName.ToUpper()#>

<#+
Dictionary<string,string> inargtype = new Dictionary<string,string>();
Dictionary<string,string> outargtype = new Dictionary<string,string>();
Dictionary<string,string> propargtype = new Dictionary<string,string>();
Dictionary<string,string> proptype = new Dictionary<string,string>();

void Initialise(uint aUseBuffers)
{
    if (aUseBuffers == 1) {
        inargtype.Add("ui1", "TUint");
        inargtype.Add("ui2", "TUint");
        inargtype.Add("ui4", "TUint");
        inargtype.Add("boolean", "TBool");
        inargtype.Add("i1", "TInt");
        inargtype.Add("i2", "TInt");
        inargtype.Add("i4", "TInt");
        inargtype.Add("string", "const Brx&");
        inargtype.Add("bin.base64", "const Brx&");
        inargtype.Add("uri", "const Brx&");
    }
    else {
        inargtype.Add("ui1", "uint32_t");
        inargtype.Add("ui2", "uint32_t");
        inargtype.Add("ui4", "uint32_t");
        inargtype.Add("boolean", "bool");
        inargtype.Add("i1", "int32_t");
        inargtype.Add("i2", "int32_t");
        inargtype.Add("i4", "int32_t");
        inargtype.Add("string", "const std::string&");
        inargtype.Add("bin.base64", "const std::string&");
        inargtype.Add("uri", "const std::string&");
    }

    if (aUseBuffers == 1) {
        outargtype.Add("ui1", "TUint&");
        outargtype.Add("ui2", "TUint&");
        outargtype.Add("ui4", "TUint&");
        outargtype.Add("boolean", "TBool&");
        outargtype.Add("i1", "TInt&");
        outargtype.Add("i2", "TInt&");
        outargtype.Add("i4", "TInt&");
        outargtype.Add("string", "Brh&");
        outargtype.Add("bin.base64", "Brh&");
        outargtype.Add("uri", "Brh&");
    }
    else {
        outargtype.Add("ui1", "uint32_t&");
        outargtype.Add("ui2", "uint32_t&");
        outargtype.Add("ui4", "uint32_t&");
        outargtype.Add("boolean", "bool&");
        outargtype.Add("i1", "int32_t&");
        outargtype.Add("i2", "int32_t&");
        outargtype.Add("i4", "int32_t&");
        outargtype.Add("string", "std::string&");
        outargtype.Add("bin.base64", "std::string&");
        outargtype.Add("uri", "std::string&");
    }

    if (aUseBuffers == 1) {
        propargtype.Add("ui1", "TUint&");
        propargtype.Add("ui2", "TUint&");
        propargtype.Add("ui4", "TUint&");
        propargtype.Add("boolean", "TBool&");
        propargtype.Add("i1", "TInt&");
        propargtype.Add("i2", "TInt&");
        propargtype.Add("i4", "TInt&");
        propargtype.Add("string", "Brhz&");
        propargtype.Add("bin.base64", "Brh&");
        propargtype.Add("uri", "Brhz&");
    }
    else {
        propargtype.Add("ui1", "uint32_t&");
        propargtype.Add("ui2", "uint32_t&");
        propargtype.Add("ui4", "uint32_t&");
        propargtype.Add("boolean", "bool&");
        propargtype.Add("i1", "int32_t&");
        propargtype.Add("i2", "int32_t&");
        propargtype.Add("i4", "int32_t&");
        propargtype.Add("string", "std::string&");
        propargtype.Add("bin.base64", "std::string&");
        propargtype.Add("uri", "std::string&");
    }

    proptype.Add("ui1", "PropertyUint");
    proptype.Add("ui2", "PropertyUint");
    proptype.Add("ui4", "PropertyUint");
    proptype.Add("boolean", "PropertyBool");
    proptype.Add("i1", "PropertyInt");
    proptype.Add("i2", "PropertyInt");
    proptype.Add("i4", "PropertyInt");
    proptype.Add("string", "PropertyString");
    proptype.Add("bin.base64", "PropertyBinary");
    proptype.Add("uri", "PropertyString");
}

string InString(Method a)
{
    string result = "";

    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }

        result += inargtype[i.variable.type];
        result += " ";
        result += "a" + i.name;
    }

    return(result);
}

string OutputArgStringPrefix(string prefix, Method a)
{
    string result = prefix;

    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += outargtype[o.variable.type];
        result += " ";
        result += "a" + o.name;
    }

    return(result);
}

string OutputArgString(Method a)
{
    return OutputArgStringPrefix("", a);
}

string ArgString(Method a)
{
    string result = InString(a);
    string outargs = OutputArgString(a);
    if (result.Length > 0 && outargs.Length > 0)
    {
        result += ", ";
    }
    result += outargs;

    return(result);
}

string InStringTrailingComma(Method a)
{
    string result = InString(a);
    if (result.Length > 0)
    {
        result += ", ";
    }
    return(result);
}

string TemplateArgument(string aName)
{
    string[] args =  System.Environment.GetCommandLineArgs();

    bool isarg = false;

    foreach (string arg in args)
    {
        if (isarg)
        {
            string[] parts = arg.Split(new char[] {':'});

            if (parts.Length == 2)
            {
                if (parts[0] == aName)
                {
                    return (parts[1]);
                }
            }

            isarg = false;
            continue;
        }

        if (arg == "-a")
        {
            isarg = true;
        }
    }

    throw (new ArgumentException(aName + " not specified"));
}
#>
